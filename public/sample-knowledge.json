[
  {
    "title": "JavaScript 异步编程最佳实践",
    "content": "## JavaScript 异步编程最佳实践\n\n### 1. 使用 async/await\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('/api/data');\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```\n\n### 2. 错误处理\n- 始终使用 try-catch 包装 await 调用\n- 考虑使用 Promise.allSettled() 处理多个异步操作\n\n### 3. 避免回调地狱\n- 使用 Promise 链或 async/await 替代嵌套回调\n- 将复杂逻辑拆分为小函数",
    "type": "practice",
    "description": "JavaScript 异步编程的最佳实践和常见模式",
    "tags": "JavaScript,异步编程,async/await,Promise,最佳实践"
  },
  {
    "title": "React Hooks 使用指南",
    "content": "## React Hooks 使用指南\n\n### useState\n```jsx\nconst [count, setCount] = useState(0);\n```\n\n### useEffect\n```jsx\nuseEffect(() => {\n  // 副作用逻辑\n  return () => {\n    // 清理函数\n  };\n}, [dependencies]);\n```\n\n### 自定义 Hook\n```jsx\nfunction useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n  \n  const increment = () => setCount(c => c + 1);\n  const decrement = () => setCount(c => c - 1);\n  \n  return { count, increment, decrement };\n}\n```",
    "type": "reference",
    "description": "React Hooks 的基本用法和最佳实践",
    "tags": "React,Hooks,useState,useEffect,前端开发"
  },
  {
    "title": "API 文档模板",
    "content": "# API 接口文档\n\n## 接口概述\n**接口名称**: {{接口名称}}\n**请求方法**: {{HTTP方法}}\n**接口地址**: {{接口URL}}\n\n## 请求参数\n| 参数名 | 类型 | 必填 | 说明 |\n|--------|------|------|------|\n| {{参数名}} | {{类型}} | {{是否必填}} | {{参数说明}} |\n\n## 请求示例\n```json\n{\n  \"{{参数名}}\": \"{{示例值}}\"\n}\n```\n\n## 响应参数\n| 参数名 | 类型 | 说明 |\n|--------|------|------|\n| code | number | 状态码 |\n| message | string | 响应消息 |\n| data | object | 响应数据 |\n\n## 响应示例\n```json\n{\n  \"code\": 200,\n  \"message\": \"success\",\n  \"data\": {}\n}\n```",
    "type": "template",
    "description": "标准的 API 接口文档模板",
    "tags": "API,文档,模板,接口设计"
  },
  {
    "title": "数据库设计原则",
    "content": "## 数据库设计原则\n\n### 1. 范式化设计\n- **第一范式 (1NF)**: 确保每个字段都是原子性的\n- **第二范式 (2NF)**: 消除部分函数依赖\n- **第三范式 (3NF)**: 消除传递函数依赖\n\n### 2. 索引设计\n- 为经常查询的字段创建索引\n- 避免过多索引影响写入性能\n- 考虑复合索引的字段顺序\n\n### 3. 命名规范\n- 表名使用复数形式\n- 字段名使用下划线分隔\n- 主键统一命名为 id\n- 外键命名为 {表名}_id\n\n### 4. 数据类型选择\n- 选择合适的数据类型和长度\n- 避免使用 TEXT 类型存储短字符串\n- 时间字段使用 TIMESTAMP 或 DATETIME",
    "type": "domain",
    "description": "数据库设计的基本原则和最佳实践",
    "tags": "数据库,设计原则,范式,索引,SQL"
  },
  {
    "title": "Git 工作流程",
    "content": "## Git 工作流程\n\n### 基本流程\n1. **克隆仓库**\n   ```bash\n   git clone <repository-url>\n   ```\n\n2. **创建分支**\n   ```bash\n   git checkout -b feature/new-feature\n   ```\n\n3. **提交更改**\n   ```bash\n   git add .\n   git commit -m \"feat: add new feature\"\n   ```\n\n4. **推送分支**\n   ```bash\n   git push origin feature/new-feature\n   ```\n\n5. **创建 Pull Request**\n   - 在 GitHub/GitLab 上创建 PR\n   - 等待代码审查\n   - 合并到主分支\n\n### 提交信息规范\n- feat: 新功能\n- fix: 修复 bug\n- docs: 文档更新\n- style: 代码格式调整\n- refactor: 代码重构\n- test: 测试相关\n- chore: 构建过程或辅助工具的变动",
    "type": "practice",
    "description": "Git 版本控制的标准工作流程",
    "tags": "Git,版本控制,工作流程,团队协作"
  }
] 